import { QuotationFormData } from '@/types/quotationCreation';

export interface ValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
}

/**
 * Validates quotation form data for auto-save
 * Returns true if data is valid enough to save
 */
export function validateQuotationData(data: QuotationFormData): ValidationResult {
  const errors: string[] = [];
  const warnings: string[] = [];

  // Basic validation - check if we have at least some essential data
  if (!data.title || data.title.trim().length === 0) {
    errors.push('Quotation title is required');
  }

  if (!data.client.name || data.client.name.trim().length === 0) {
    errors.push('Client name is required');
  }

  // Check if we have at least one item or service
  if ((!data.items || data.items.length === 0) && 
      (!data.services || data.services.length === 0)) {
    warnings.push('No items or services added yet');
  }

  // Validate items if they exist
  if (data.items && data.items.length > 0) {
    data.items.forEach((item, index) => {
      if (!item.name || item.name.trim().length === 0) {
        errors.push(`Item ${index + 1}: Name is required`);
      }
      if (item.quantity <= 0) {
        errors.push(`Item ${index + 1}: Quantity must be greater than 0`);
      }
      if (item.unitPrice < 0) {
        errors.push(`Item ${index + 1}: Unit price cannot be negative`);
      }
    });
  }

  // Validate services if they exist
  if (data.services && data.services.length > 0) {
    data.services.forEach((service, index) => {
      if (!service.name || service.name.trim().length === 0) {
        errors.push(`Service ${index + 1}: Name is required`);
      }
      if (service.quantity <= 0) {
        errors.push(`Service ${index + 1}: Quantity must be greater than 0`);
      }
      if (service.unitPrice < 0) {
        errors.push(`Service ${index + 1}: Unit price cannot be negative`);
      }
    });
  }

  // Check for reasonable values
  if (data.tax.rate < 0 || data.tax.rate > 100) {
    warnings.push('Tax rate should be between 0% and 100%');
  }

  if (data.discount.value < 0) {
    warnings.push('Discount cannot be negative');
  }

  if (data.discount.type === 'percentage' && data.discount.value > 100) {
    warnings.push('Percentage discount cannot exceed 100%');
  }

  // Check dates
  if (data.validUntil && data.issueDate && data.validUntil <= data.issueDate) {
    warnings.push('Valid until date should be after issue date');
  }

  // For auto-save, we're more lenient - only block on critical errors
  const isValid = errors.length === 0;

  return {
    isValid,
    errors,
    warnings,
  };
}

/**
 * Checks if quotation data has enough content to be worth saving
 */
export function hasMinimumContent(data: QuotationFormData): boolean {
  // Check if we have at least some meaningful content
  const hasBasicInfo = data.title && data.title.trim().length > 0;
  const hasClientInfo = data.client.name && data.client.name.trim().length > 0;
  const hasItems = data.items && data.items.length > 0;
  const hasServices = data.services && data.services.length > 0;
  const hasDescription = data.description && data.description.trim().length > 0;

  // Return true if we have at least basic info + client info + some content
  return hasBasicInfo && hasClientInfo && (hasItems || hasServices || hasDescription);
}

/**
 * Sanitizes quotation data for storage (removes sensitive or unnecessary fields)
 */
export function sanitizeQuotationData(data: QuotationFormData): Partial<QuotationFormData> {
  const {
    // Keep essential fields
    title,
    description,
    projectType,
    client,
    issueDate,
    validUntil,
    currency,
    language,
    items,
    services,
    subtotal,
    discount,
    tax,
    total,
    terms,
    notes,
    timeline,
    paymentTerms,
    status,
    priority,
    autoCalculate,
    includeTax,
    createdAt,
    updatedAt,
    // Remove sensitive or unnecessary fields
    quotationNumber, // Generated by backend
    attachments, // File references
    relatedDocuments, // File references
    approvalWorkflow, // Workflow state
    tags, // Generated by backend
    category, // Generated by backend
    source, // Generated by backend
    sendEmail, // UI state
    trackViews, // UI state
    allowComments, // UI state
    createdBy, // User context
    lastModifiedBy, // User context
    versionHistory, // Generated by backend
    ...rest
  } = data;

  return {
    title,
    description,
    projectType,
    client,
    issueDate,
    validUntil,
    currency,
    language,
    items,
    services,
    subtotal,
    discount,
    tax,
    total,
    terms,
    notes,
    timeline,
    paymentTerms,
    status,
    priority,
    autoCalculate,
    includeTax,
    createdAt,
    updatedAt,
    ...rest,
  };
}
